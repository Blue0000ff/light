<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>docker-compose on 灯塔</title>
        <link>https://kylin.moe/tags/docker-compose/</link>
        <description>Recent content in docker-compose on 灯塔</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh</language>
        <lastBuildDate>Wed, 10 Aug 2022 16:22:29 +0800</lastBuildDate><atom:link href="https://kylin.moe/tags/docker-compose/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>简单记录一下docker相关命令</title>
        <link>https://kylin.moe/p/%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bdocker%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</link>
        <pubDate>Wed, 10 Aug 2022 16:22:29 +0800</pubDate>
        
        <guid>https://kylin.moe/p/%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bdocker%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</guid>
        <description>&lt;h1 id=&#34;docker&#34;&gt;docker&lt;/h1&gt;
&lt;p&gt;容器 Docker 把代码及其所有依赖打包的一个标准单元，可以把一个程序从一个环境快速可靠的移植到另一个环境上运行。Docker 镜像是一个完整的、可靠的、独立的软件包，其中包含了运行程序所需要的一切。&lt;/p&gt;
&lt;h2 id=&#34;下载安装&#34;&gt;下载安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.docker.com/get-started/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官网下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;查找镜像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;
&lt;p&gt;Docker 的运行需要&lt;code&gt;容器&lt;/code&gt;和&lt;code&gt;镜像&lt;/code&gt;，镜像需要人来打包制作，容器在 Docker 运行镜像时会自动生成。或者我们可以手动生成容器，并使用参数来指定容器的名称、使用端口等信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器和镜像的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;镜像只能运行在底层内核上，通常只能用作一次性使用，不能保存保留任何数据。使用命令 &lt;code&gt;docker run [镜像名]&lt;/code&gt; 的时候 docker 会自动生成一个容器，我们使用 &lt;code&gt;docker exec&lt;/code&gt; 进入的通常都是容器而不是镜像。&lt;/p&gt;
&lt;p&gt;安装完成后使用 &lt;code&gt;docker version&lt;/code&gt; 或 &lt;code&gt;docker info&lt;/code&gt; 查看docker版本&lt;/p&gt;
&lt;h2 id=&#34;基础命令&#34;&gt;基础命令&lt;/h2&gt;
&lt;p&gt;通常使用docker的步骤包括但不限于&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查找镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行镜像 - 创建容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;停止容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除镜像&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本章将按照步骤介绍常用命令以及所对应含义&lt;/p&gt;
&lt;p&gt;在此之前需要先掌握几条基本命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看本地镜像：&lt;code&gt;docker images&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看本地所有容器 &lt;code&gt;docker ps -a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看正在运行中的容器 &lt;code&gt;docker ps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为镜像没有运行这一说，所以使用 &lt;code&gt;docker ps&lt;/code&gt; 命令实际上查看的是正在运行中的容器。&lt;/p&gt;
&lt;h3 id=&#34;1-查找镜像&#34;&gt;1. 查找镜像&lt;/h3&gt;
&lt;p&gt;1-1 命令行查找远程镜像&lt;/p&gt;
&lt;p&gt;搜索镜像：&lt;code&gt;docker search 名称&lt;/code&gt;
查看镜像 &lt;code&gt;curl https://registry.hub.docker.com/v1/repositories/镜像名称/tags&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;tags 根据镜像而定或多或少，更好的方式是通过网页点击查看历史 tags&lt;/p&gt;
&lt;p&gt;1-2 Docker Hub 网页查找镜像&lt;/p&gt;
&lt;p&gt;通过 &lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker Hub&lt;/a&gt; 查找需要的镜像，找到 tags 标签&lt;/p&gt;
&lt;h3 id=&#34;2-下载镜像&#34;&gt;2. 下载镜像&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker pull [REPOSITORY[:TAG]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;完整 TAG 可以通过不同方式获取，在页面上可以通过 Docker Pull Command 提供的命令进行下载&lt;/p&gt;
&lt;h3 id=&#34;3-运行镜像&#34;&gt;3. 运行镜像&lt;/h3&gt;
&lt;p&gt;在运行镜像时 docker 会自动生成一个提供访问和服务的容器并运行，我们可以通过参数指定这个容器的部分参数&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;docker images&lt;/code&gt; 可以查看镜像对应的ID&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run 镜像ID&lt;/code&gt; 可以通过镜像创建并且运行容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run [options] 镜像ID
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;options:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	--name 指定容器名称
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	-p  指定容器提供服务的端口
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	-i  创建交互式
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	-d  后台运行容器
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;docker ps&lt;/code&gt; 可以查看所有正在运行中的容器&lt;/p&gt;
&lt;h3 id=&#34;4-进入容器&#34;&gt;4. 进入容器&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker exec -it 容器ID或名称 /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以通过容器ID或通过创建容器时指定的名称进入，如果没有指定名称那么则由 docker 随机生成&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/bin/bash&lt;/code&gt; 则是指定进入容器所使用的 shell，可以更换为 &lt;code&gt;/bin/sh&lt;/code&gt; 或是 &lt;code&gt;/bin/zsh&lt;/code&gt; 等&lt;/p&gt;
&lt;h3 id=&#34;5-停止容器&#34;&gt;5. 停止容器&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker stop [容器ID 或 容器名]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-启动容器&#34;&gt;6. 启动容器&lt;/h3&gt;
&lt;p&gt;启动指定容器 &lt;code&gt;docker start [容器ID 或 容器名]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-删除容器&#34;&gt;6. 删除容器&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker rm [容器ID 或 容器名]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;7-删除镜像&#34;&gt;7. 删除镜像&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker rmi [OPTIONS] [镜像ID]&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -f, --force      强制删除镜像
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      --no-prune   不删除没有附带标签的父级镜像
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;拓展用法&#34;&gt;拓展用法&lt;/h2&gt;
&lt;h3 id=&#34;导出镜像&#34;&gt;导出镜像&lt;/h3&gt;
&lt;p&gt;将容器导出为 tar 压缩包 &lt;code&gt;docker export [容器ID 或 容器名] &amp;gt; [名称].tar&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;导入镜像&#34;&gt;导入镜像&lt;/h3&gt;
&lt;p&gt;将快照导入到镜像 &lt;code&gt;cat [名称].tar | docker import - [容器名]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过 URL 导入容器 &lt;code&gt;docker import http://example.com/exampleimage.tgz&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;网络端口&#34;&gt;网络端口&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt; 可以查看容器的端口映射，&lt;code&gt;docker port&lt;/code&gt; 可以查看指定（ID或容器名）容器的端口映射具体情况&lt;/p&gt;
&lt;p&gt;查看端口映射情况 &lt;code&gt;docker port [容器ID 或 容器名]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;容器状态&#34;&gt;容器状态&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;查看容器内的标准输出&lt;/strong&gt; &lt;code&gt;docker logs [容器ID 或 容器名]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看容器内部日志 &lt;code&gt;docker logs -f [容器ID 或 容器名]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看容器内部运行的程序 &lt;code&gt;docker top [容器ID 或 容器名]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;docker inspect [容器ID 或 容器名]&lt;/code&gt; 来查看 docker 的底层信息。它会返回一个记录着 docker 容器配置和状态信息的 JSON 格式文件。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
